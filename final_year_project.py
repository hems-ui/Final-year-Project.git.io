# -*- coding: utf-8 -*-

"""FINAL YEAR PROJECT.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sShOuIFHZZ7zoFx8_5V88W59tYxJ7Iy9
"""

import pandas as pd
import  numpy as np
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from mpl_toolkits.mplot3d import Axes3D
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.naive_bayes import GaussianNB
from sklearn import svm
from sklearn import metrics
from sklearn.metrics import classification_report
from sklearn.metrics import confusion_matrix

train=pd.read_csv('/content/drive/My Drive/Training.csv')
test=pd.read_csv('/content/drive/My Drive/Testing.csv')
print(train.shape)
print(test.shape)

second = train.loc[[1]]
second

train.head()

train.tail()

train.dtypes

train.describe()

train.info()

train.isnull().sum()

train.nunique()

train.count()[0]

train.count()[1]

train.columns.values

train['prognosis'].unique()

train['prognosis'].value_counts(normalize = True).plot.bar()

x_train=train.drop(['prognosis'],axis='columns')
y_train=train['prognosis']
print(y_train)

x_test=test.drop(['prognosis'],axis='columns')
y_test=test['prognosis']
print(y_test)

lr=LogisticRegression(C=0.01,solver='liblinear').fit(x_train,y_train)
y_pred1=lr.predict(x_test)
a1=metrics.accuracy_score(y_test,y_pred1)
print(a1*100)

rfc=RandomForestClassifier(n_estimators=100).fit(x_train,y_train)
rfc_pred=rfc.predict(x_test)
rfc_acc=metrics.accuracy_score(y_test,rfc_pred)
print(rfc_acc*100)

nbc=GaussianNB().fit(x_train,y_train)
nbc_pred=nbc.predict(x_test)
nbc_acc=metrics.accuracy_score(y_test,nbc_pred)
print(nbc_acc*100)

actual=y_test.values
pred=rfc.predict(x_test)
for i in range(0,15):
  if pred[i]==actual[i]:
    print("PRED:",pred[i],"\tACTUAL:",actual[i])
  else:
    print('WRONG PREDICTION')
    print('PRED:',pred[i],'\tACTUAL:{1}',actual[i])

importances = rfc.feature_importances_
indices = np.argsort(importances)[::-1]

features=train.columns[:-1]
feature_dict={}
for i,f in enumerate(features):
    feature_dict[f]=i

print(feature_dict)

a='swollen_blood_vessels'
b='puffy_face_and_eyes'
c='swollen_extremeties'
d='enlarged_thyroid'
e='brittle_nails'

symptoms=[a,b,c]
sym=[]
for i in symptoms:
  if i=='':
    continue
  sym.append(feature_dict[i])
print(sym)

sample=[]
for i in range(len(features)):
  if i in features:
    a=1
  else:
    a=0
  sample.append(a)

print(len(sample))
a=len(sample)

sample=np.array(sample).reshape(1,a)
rfc.predict(sample)

